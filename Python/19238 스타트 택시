import sys
from collections import deque
input = sys.stdin.readline

dx = [0, 0, 1, -1]
dy = [1, -1, 0, 0]

def bfs(x, y):
    work = []
    visited = [[0] * N for _ in range(N)]
    q = deque([(x, y)])
    if board[x][y] == -1:
        work.append([visited[x][y], x, y])
    while q:
        x, y = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny] and board[nx][ny] <= 0:
                visited[nx][ny] = visited[x][y] + 1
                if board[nx][ny] == -1:
                    work.append([visited[nx][ny], nx, ny])
                q.append((nx, ny))
    '''print('-' * 40)
    for i in range(len(visited)):
        print(*visited[i])
    print('-' * 40)'''
    return work

def drive(sx, sy, ax, ay):
    visited = [[0] * N for _ in range(N)]
    q = deque([(sx, sy)])
    while q:
        x, y = q.popleft()
        for i in range(4):
            nx, ny = x + dx[i], y + dy[i]
            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny] and board[nx][ny] <= 0:
                visited[nx][ny] = visited[x][y] + 1
                q.append((nx, ny))
                if nx == ax and ny == ay:
                    '''print('-' * 35)
                    for i in range(len(visited)):
                        print(*visited[i])
                    print('-' * 35)'''
                    return visited[nx][ny]
    return 2e9

N, M, fuel = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(N)]
x, y = map(int, input().split())
x, y = x - 1, y - 1
customer = [list(map(int, input().split())) for _ in range(M)]
end_pt = [[0] * N for _ in range(N)]

for i, coor in enumerate(customer):
    s_x, s_y, e_x, e_y = coor[0] - 1, coor[1] - 1, coor[2] - 1, coor[3] - 1
    board[s_x][s_y] = -1
    end_pt[s_x][s_y] = (e_x, e_y)

customer_num = len(customer)

while customer_num > 0:
    work = bfs(x, y)
    work.sort(key = lambda x: (x[0], x[1], x[2]), reverse = True)

    #print(work)

    if not work:
        fuel = -1
        #print('not work')
        break

    distance, sx, sy = work.pop()

    if fuel < distance:
        fuel = -1
        break
    else:
        fuel -= distance
    
    #print(distance, sx, sy, 'fuel : ', fuel)

    spend_fuel = drive(sx, sy, end_pt[sx][sy][0], end_pt[sx][sy][1])
    if fuel < spend_fuel:
        fuel = -1
        break
    else:
        fuel -= spend_fuel

    #print(spend_fuel, end_pt[sx][sy][0], end_pt[sx][sy][1], 'fuel : ', fuel)
    
    fuel += spend_fuel * 2
    board[sx][sy] = 0
    x, y = end_pt[sx][sy][0], end_pt[sx][sy][1]
    customer_num -= 1

    #print('fuel : ', fuel)

print(fuel)
